1. Reflection

n = -2:2;
x = [5,6,3,4,1];

% Creating mirrored versions for negative indices
x_mirror = fliplr(x); %x_mirror = [1,4,3,5,5]

% Plotting
subplot(2,1,1);
stem(n, x, 'b'); 
grid on; 
axis([-3 3 -1 7]);
xlabel('n'); 
ylabel('Amplitude'); 
title('Original Signal');

subplot(2,1,2);
stem(n, x_mirror, 'r'); 
grid on; 
axis([-3 3 -1 7]);
xlabel('n'); 
ylabel('Amplitude'); 
title('Reversed Signal');




2. Shifting
Ex- 15:

clc;
clear;
 
n = -5:5;
x= [0 -1 -.5 .5 1 1 1 1 .5 0 0]
subplot(3,1,1);
stem (n,x);
xlabel('Time Sample');
ylabel('Amplitude');
title('Original Signal');
axis([-7 7 min(x)-2 max(x)+2]);
grid on;
grid minor;
 
m = n+4; 
subplot(3,1,2);
stem (m,x);
xlabel('Time Sample');
ylabel('Amplitude');
title('Time right shifted signal');
axis([-7-2+4 7+2+4 min(x)-2 max(x)+2]);
grid on;
grid minor;

l = n-4; 
subplot(3,1,3);
stem (l,x);
xlabel('Time Sample');

ylabel('Amplitude');
title('Time left shifted signal');
axis([-7-2-4 7+2-4 min(x)-2 max(x)+2]);
grid on;
grid minor;


Ex- 18:

clc;
clear;
 
n = -3:3;
x= [-2 0 1 -3 2 -1 3];
subplot(3,1,1);
stem (n,x);
xlabel('Time Sample');
ylabel('Amplitude');
title('Original Signal X[n]');
axis([-8 8 -4 4]);
grid on;
grid minor;
 
m = n+3; 
subplot(3,1,2);
stem (m,x, 'b');
xlabel('Time Sample');
ylabel('Amplitude');
title('Y[n] = X[n-3]');
axis([-8 8 -4 4]);
grid on;
grid minor;

l = n-2; 
subplot(3,1,3);
stem (l,x, 'r');
xlabel('Time Sample');
ylabel('Amplitude');
title('Z[n] = X[n+2]');
axis([-8 8 -4 4]);
grid on;
grid minor;




3. Scaling

close all;
clear all;
clc;
n=-6:6;
y=[1 0.5 1 0.5 1 0.5 1 0.5 1 0.5 1 0.5 1];
   
index=1;
for i=1:length(n)
    %if(rem(n(i),2)==0)
        x1(index)=n(i)./2;
        y1(index)=y(i);
        index=index+1;
    %end
end
subplot(3,1,1);
stem(n,y);
xlabel("Time domain");
ylabel("Amplitude");
grid on;
axis([-8 8 -0.5 1.5]);
title("Original signal X[n]");

subplot(3,1,2);
stem(x1,y1,'r');
xlabel("Time domain");
ylabel("Amplitude");
grid on;
grid minor;
axis([-8 8 -0.5 1.5]);
title("Compresion signal Y[n] = X[2n]");

index=1;
n2=-12:12;
for i=1:length(n2)
    x1(i)=n2(i);
    if(rem(n2(i),2)==0)
        y1(i)=y(index);
        index=index+1;
    else
        y1(i)=0;
    end
end
subplot(3,1,3);
stem(x1,y1,'b');
xlabel("Time domain");
ylabel("Amplitude");
grid on;
grid minor;
axis([-13 13 -0.5 1.5]);
title("Expanding signal Y[n] = X[n/2]");





4. Precedence Rule

close all;
clear all;
clc;

x1=[-6:1:6];
y1=[0 0 0 0 -1 -1 0 1 1 0 0 0 0];
%plotting original signal
subplot(3,1,1);
stem(x1,y1);
axis([-10 10 -2 2]);
xlabel("Time sample(n)");
ylabel("Amplitude");
title("Original Signal: x[n]");

x2=x1-3;
y2=y1;
%plotting left shifted signal
subplot(3,1,2);
stem(x2,y2);
axis([-10 10 -2 2]);
xlabel("Time sample(n)");
ylabel("Amplitude");
title("Left Shifted Signal: x[n+3]");

value=2;
temp=1;
for i=1:length(x2)
    %if(rem(x2(i),value)==0)
        x3(temp) = x2(i)./value;
        y3(temp) = y2(i);
        temp=temp+1;
    %end
end

%plotting the final signal
subplot(3,1,3);
stem(x3,y3);
axis([-10 10 -2 2]);
xlabel("Time sample(n)");
ylabel("Amplitude");
title("Final Signal: x[2n+3]");




5. Even and Odd Composition

n = -2:2;
x = [5,6,3,4,1];

% Creating mirrored versions for negative indices
x_mirror = fliplr(x); %x_mirror = [1,4,3,5,5]

% even and odd components
xe = (x + x_mirror) / 2; %xe= ( x(n)+x(-n) )/2;
xo = (x - x_mirror) / 2; %xo= ( x(n)-x(-n) )/2;

% Plotting
subplot(4,1,1);
stem(n, x); 
grid on; 
axis([-3 3 -1 7]);
xlabel('n'); 
ylabel('Amplitude'); 
title('Original Signal');

subplot(4,1,2);
stem(n, x_mirror); 
grid on; 
axis([-3 3 -1 7]);
xlabel('n'); 
ylabel('Amplitude'); 
title('Reversed Signal');

subplot(4,1,3); 
stem(n, xe, 'b'); 
grid on; 
axis([-3 3 -1 6]);
xlabel('n'); 
ylabel('Amplitude'); 
title('Even Signal');

subplot(4,1,4); 
stem(n, xo, 'b'); 
grid on; 
axis([-3 3 -3 3]);
xlabel('n'); 
ylabel('Amplitude'); 
title('Odd Signal');
